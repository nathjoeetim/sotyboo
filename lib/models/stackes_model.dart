class GetStackesModel {
  final bool? status;
  final String? message;
  final List<Data>? data;
  final int? page;
  final int? limit;
  final dynamic totalpages;

  GetStackesModel({
    this.status,
    this.message,
    this.data,
    this.page,
    this.limit,
    this.totalpages,
  });

  GetStackesModel.fromJson(Map<String, dynamic> json)
      : status = json['status'] as bool?,
        message = json['message'] as String?,
        data = (json['data'] as List?)?.map((dynamic e) => Data.fromJson(e as Map<String,dynamic>)).toList(),
        page = json['page'] as int?,
        limit = json['limit'] as int?,
        totalpages = json['totalpages'];

  Map<String, dynamic> toJson() => {
    'status' : status,
    'message' : message,
    'data' : data?.map((e) => e.toJson()).toList(),
    'page' : page,
    'limit' : limit,
    'totalpages' : totalpages
  };
}

class Data {
  final List<TotalStake>? totalStake;
  final List<StackesData>? data;

  Data({
    this.totalStake,
    this.data,
  });

  Data.fromJson(Map<String, dynamic> json)
      : totalStake = (json['totalStake'] as List?)?.map((dynamic e) => TotalStake.fromJson(e as Map<String,dynamic>)).toList(),
        data = (json['data'] as List?)?.map((dynamic e) => StackesData.fromJson(e as Map<String,dynamic>)).toList();

  Map<String, dynamic> toJson() => {
    'totalStake' : totalStake?.map((e) => e.toJson()).toList(),
    'data' : data?.map((e) => e.toJson()).toList()
  };
}

class TotalStake {
  final dynamic id;
  final int? totalStake;

  TotalStake({
    this.id,
    this.totalStake,
  });

  TotalStake.fromJson(Map<String, dynamic> json)
      : id = json['_id'],
        totalStake = json['totalStake'] as int?;

  Map<String, dynamic> toJson() => {
    '_id' : id,
    'totalStake' : totalStake
  };
}

class StackesData {
  final String? id;
  final String? game;
  final int? stake;
  final List<dynamic>? odd;
  final int? potentialWin;
  final String? slipType;
  final String? userId;
  final String? status;
  final String? createdAt;
  final String? updatedAt;
  final int? v;

  ///generated by developer to make numbering easy
  String number;

  StackesData({
    this.id,
    this.game,
    this.stake,
    this.odd,
    this.potentialWin,
    this.slipType,
    this.userId,
    this.status,
    this.createdAt,
    this.updatedAt,
    this.v,
    this.number="",
  });

  StackesData.fromJson(Map<String, dynamic> json,)
      : id = json['_id'] as String?,
        game = json['game'] as String?,
        stake = json['stake'] as int?,
        odd = json['odd'] as List?,
        potentialWin = json['potentialWin'] as int?,
        slipType = json['slipType'] as String?,
        userId = json['userId'] as String?,
        status = json['status'] as String?,
        createdAt = json['createdAt'] as String?,
        updatedAt = json['updatedAt'] as String?,
        v = json['__v'] as int?,
        number="";

  Map<String, dynamic> toJson() => {
    '_id' : id,
    'game' : game,
    'stake' : stake,
    'odd' : odd,
    'potentialWin' : potentialWin,
    'slipType' : slipType,
    'userId' : userId,
    'status' : status,
    'createdAt' : createdAt,
    'updatedAt' : updatedAt,
    '__v' : v
  };
}